{"version":3,"sources":["algorithms/BubbleSort.ts","algorithms/BubbleSortOpt.ts","algorithms/InsertionSort.ts","algorithms/SelectionSort.ts","algorithms/SimpleSort.ts","components/AlgorithmSelector.tsx","components/Bar.tsx","components/Debugger.tsx","components/Hud.tsx","components/PauseButton.tsx","components/SpeedSlider.tsx","App.tsx","index.tsx"],"names":["algorithm","array","iter","length","delay","index","index2","line","temp","BubbleSort","sort","implementation","name","flag","BubbleSortOpt","j","InsertionSort","minimum","suchPosition","minimumPosition","value","SelectionSort","SimpleSort","algorithms","AlgorithmSelector","props","style","color","onChange","x","parseInt","target","map","i","hue2rgb","p","q","t","hslToRgb","h","s","l","r","g","b","Bar","backgroundColor","highlight","height","width","className","Debugger","code","split","HudView","index1","speed","PauseButton","onClick","onToggle","paused","SpeedSlider","type","valueAsNumber","min","step","max","stateFactory","count","arr","push","Math","random","generateValues","generator","config","pause","defaultState","App","state","setTimeout","this","tick","bind","result","next","info","done","setState","widthPerTile","window","innerWidth","algo","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3d27e36.chunk.js","sourcesContent":["import SortAlgorithm, { StateInfo } from \"./SortAlgorithm\"\r\n\r\nfunction* algorithm(array: number[]): Generator<StateInfo> {\r\n    for (let iter = 1; iter < array.length; iter++) {\r\n        yield { array, delay: 40, index: -1, index2: -1, line: 2 }\r\n        for (let index = 0; index < array.length - iter; index++) {\r\n            yield { array, delay: 10, index: index, index2: -1, line: 4 }\r\n            if (array[index] > array[index + 1]) {\r\n                yield { array, delay: 10, index, index2: index + 1, line: 6 }\r\n                yield { array, delay: 10, index, index2: index + 1, line: 7 }\r\n                let temp = array[index]\r\n                array[index] = array[index + 1]\r\n                array[index + 1] = temp\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst code = `for (int iter = 1; iter < sortierArray.length; iter++)\r\n{\r\n    for (int index = 0; index < sortierArray.length - iter; index++)\r\n    {\r\n        if (sortierArray[index] > sortierArray[index + 1])\r\n        {\r\n            vertausche(index, index + 1);\r\n        }\r\n    }\r\n}`\r\n\r\nconst BubbleSort: SortAlgorithm = {\r\n    sort: algorithm,\r\n    implementation: code,\r\n    name: \"BubbleSort\"\r\n}\r\n\r\nexport default BubbleSort\r\n","import SortAlgorithm, { StateInfo } from \"./SortAlgorithm\"\r\n\r\nfunction* algorithm(array: number[]): Generator<StateInfo> {\r\n    for (let iter = 1; iter < array.length; iter++) {\r\n        let flag = false\r\n        yield { line: 2, index: -1, index2: -1, array, delay: 40 }\r\n\r\n        for (let index = 0; index < array.length - iter; index++) {\r\n            yield { line: 6, index, index2: -1, array, delay: 10 }\r\n\r\n            if (array[index] > array[index + 1]) {\r\n                yield { line: 9, index, index2: -1, array, delay: 10 }\r\n                let temp = array[index]\r\n                array[index] = array[index + 1]\r\n                array[index + 1] = temp\r\n                flag = true\r\n            }\r\n        }\r\n\r\n        if (!flag) {\r\n            yield { line: 17, index: -1, index2: -1, array, delay: 10 }\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst code = `for (int iter = 1; iter < sortierArray.length; iter++)\r\n{\r\n    boolean flag = false;\r\n\r\n    for (int index = 0; index < sortierArray.length - iter; index++)\r\n    {\r\n        if (sortierArray[index] > sortierArray[index + 1])\r\n        {\r\n            vertausche(index, index + 1);\r\n            flag = true;\r\n        }\r\n    }\r\n\r\n    if (!flag)\r\n    {\r\n        // Sortierung fertiggestellt\r\n        break;\r\n    }\r\n}`\r\n\r\nconst BubbleSortOpt: SortAlgorithm = {\r\n    sort: algorithm,\r\n    implementation: code,\r\n    name: 'Bubble Sort (mit Flag-Optimierung)'\r\n}\r\n\r\nexport default BubbleSortOpt\r\n","import SortAlgorithm, { StateInfo } from \"./SortAlgorithm\"\r\n\r\nfunction* algorithm(array: number[]): Generator<StateInfo> {\r\n    for (let index = 1; index <= array.length - 1; index++) {\r\n        yield { index: index, line: 1, array, delay: 30, index2: 0 }\r\n        const temp = array[index]\r\n        yield { index: index, line: 2, array, delay: 30, index2: 0 }\r\n\r\n        let j = index - 1\r\n\r\n        yield { index: index, line: 8, array, delay: 30, index2: j }\r\n        while (j >= 0 && array[j] > temp) {\r\n            yield { index: index, line: 10, array, delay: 30, index2: j }\r\n            array[j + 1] = array[j]\r\n            yield { index: index, line: 11, array, delay: 30, index2: j }\r\n            j--\r\n        }\r\n\r\n        array[j + 1] = temp\r\n\r\n        yield { index: index, line: 15, array, delay: 100, index2: j }\r\n    }\r\n}\r\n\r\n\r\nconst code = `for (int i = 1; i <= array.length - 1; i++)\r\n{\r\n    // Aktuellen Wert zwischenspeichern\r\n    int temp = array[i];\r\n    int j = i - 1;\r\n\r\n    // Datensätze tauschen und dabei den Platz für die aktuelle Zahl suchen\r\n    while (j >= 0 && array[j] > temp)\r\n    {\r\n        array[j + 1] = array[j];\r\n        j--;\r\n    }\r\n\r\n    // Zwischengespeicherte Zahl erneut schreiben an ihrem eigentlichen Platz\r\n    array[j + 1] = temp;\r\n}`\r\n\r\nconst InsertionSort: SortAlgorithm = {\r\n    sort: algorithm,\r\n    implementation: code,\r\n    name: \"Insertion Sort\"\r\n}\r\n\r\nexport default InsertionSort\r\n","import SortAlgorithm, { StateInfo } from \"./SortAlgorithm\"\r\n\r\nfunction* algorithm(array: number[]): Generator<StateInfo> {\r\n    for (let index = 0; index < array.length - 1; index++) {\r\n        yield { array, delay: 10, index: index, index2: -1, line: 2 }\r\n\r\n        let suchPosition = index\r\n        let minimum = array[suchPosition]\r\n        let minimumPosition = suchPosition\r\n\r\n        yield { array, delay: 10, index: index, index2: -1, line: 5 }\r\n\r\n        while (suchPosition++ < array.length - 1) {\r\n            yield { array, delay: 10, index: index, index2: suchPosition, line: 8 }\r\n            let value = array[suchPosition]\r\n            yield { array, delay: 10, index: index, index2: suchPosition, line: 9 }\r\n\r\n            yield { array, delay: 10, index: index, index2: suchPosition, line: 11 }\r\n            if (value < minimum) {\r\n                yield { array, delay: 40, index: index, index2: suchPosition, line: 13 }\r\n                minimum = value\r\n                minimumPosition = suchPosition\r\n            }\r\n        }\r\n\r\n        yield { array, delay: 40, index: index, index2: suchPosition, line: 18 }\r\n        let temp = array[minimumPosition]\r\n        yield { array, delay: 20, index: index, index2: suchPosition, line: 19 }\r\n        array[minimumPosition] = array[index]\r\n        yield { array, delay: 20, index: index, index2: suchPosition, line: 20 }\r\n        array[index] = temp\r\n    }\r\n}\r\n\r\n\r\nconst code = `for (int index = 0; index < sortierArray.length - 1; index++)\r\n{\r\n    int suchPosition = index;\r\n    int minimum = this.sortierArray[suchPosition];\r\n    int minimumPosition = suchPosition;\r\n\r\n    while (suchPosition++ < this.sortierArray.length - 1)\r\n    {\r\n        int value = this.sortierArray[suchPosition];\r\n\r\n        if (value < minimum)\r\n        {\r\n            minimum = value;\r\n            minimumPosition = suchPosition;\r\n        }\r\n    }\r\n\r\n    int temp = sortierArray[minimumPosition];\r\n    sortierArray[minimumPosition] = sortierArray[index];\r\n    sortierArray[index] = temp;\r\n}`\r\n\r\nconst SelectionSort: SortAlgorithm = {\r\n    sort: algorithm,\r\n    implementation: code,\r\n    name: \"Selection Sort\"\r\n}\r\n\r\nexport default SelectionSort\r\n","import SortAlgorithm, { StateInfo } from \"./SortAlgorithm\"\r\n\r\nfunction* algorithm(array: number[]): Generator<StateInfo> {\r\n    for (let index = 0; index < array.length - 1; index++) {\r\n        yield { array, delay: 10, index, index2: -1, line: 3 }\r\n        for (let index2 = index + 1; index2 < array.length; index2++) {\r\n            yield { array, delay: 10, index, index2, line: 6 }\r\n            yield { array, delay: 10, index, index2, line: 7 }\r\n            if (array[index] >= array[index2]) {\r\n                yield { array, delay: 60, index, index2, line: 10 }\r\n                let temp = array[index]\r\n                array[index] = array[index2]\r\n                array[index2] = temp\r\n                yield { array, delay: 60, index, index2, line: 13 }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst code = `// Die For-Schleife läuft von dem ersten Element/Index bis zum vorletzen Index durch.\r\nfor (int i = 0; i < zahlenfeld.length - 1; i++)\r\n{\r\n    // Die For-Schleife läuft von dem Index der nach dem Index der äußeren For-Schleife\r\n    // ist bis zum letzten Index (diesmal nicht bis zum vorletzen) durch.\r\n    for (int j = i + 1; j < zahlenfeld.length; j++)\r\n    {\r\n        // Schauen, ob die erste der Zahlen größer oder gleich der zweiten Zahl ist.\r\n        if (zahlenfeld[i] >= zahlenfeld[j])\r\n        {\r\n            // Die beiden Zahlen werden vertauscht, und die Methode 'tausche()' erhält\r\n            // die Indize der Elemente an denen die Elemente vertauscht werden sollen.\r\n            tausche(i, j);\r\n        }\r\n    }\r\n}`\r\n\r\nconst SimpleSort: SortAlgorithm = {\r\n    sort: algorithm,\r\n    implementation: code,\r\n    name: \"SimpleSort\"\r\n}\r\n\r\nexport default SimpleSort\r\n","import BubbleSort from \"../algorithms/BubbleSort\"\r\nimport BubbleSortOpt from \"../algorithms/BubbleSortOpt\"\r\nimport InsertionSort from \"../algorithms/InsertionSort\"\r\nimport SelectionSort from \"../algorithms/SelectionSort\"\r\nimport SimpleSort from \"../algorithms/SimpleSort\"\r\nimport SortAlgorithm from \"../algorithms/SortAlgorithm\"\r\n\r\nconst algorithms = [\r\n    InsertionSort,\r\n    BubbleSort,\r\n    BubbleSortOpt,\r\n    SelectionSort,\r\n    SimpleSort\r\n]\r\n\r\nexport default function AlgorithmSelector(props: { onChange: (algorithm: SortAlgorithm) => void }) {\r\n    return <div>\r\n        <span style={{ color: '#fff' }}>Algorithmus: </span>\r\n        <select onChange={x => props.onChange(algorithms[parseInt(x.target.value)])}>\r\n            {algorithms.map((x, i) => <option value={i}>{x.name}</option>)}\r\n        </select>\r\n    </div>\r\n}\r\n","function hue2rgb(p: number, q: number, t: number) {\r\n    if (t < 0) t += 1\r\n    if (t > 1) t -= 1\r\n    if (t < 1 / 6) return p + (q - p) * 6 * t\r\n    if (t < 1 / 2) return q\r\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\r\n    return p\r\n}\r\n\r\nfunction hslToRgb(h: number, s: number, l: number) {\r\n    var r, g, b\r\n\r\n    if (s === 0) {\r\n        r = g = b = l // achromatic\r\n    } else {\r\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s\r\n        var p = 2 * l - q\r\n\r\n        r = hue2rgb(p, q, h + 1 / 3)\r\n        g = hue2rgb(p, q, h)\r\n        b = hue2rgb(p, q, h - 1 / 3)\r\n    }\r\n\r\n    return `rgb(${r * 255},${g * 255},${b * 255})`\r\n}\r\n\r\nexport default function Bar(props: { value: number, width: number, highlight: boolean }) {\r\n    const style = {\r\n        backgroundColor: props.highlight ? '#fff' : hslToRgb(props.value, 1, .5),\r\n        height: 200 * props.value,\r\n        width: props.width\r\n    }\r\n\r\n    return <div className='bar' style={style}></div>\r\n}\r\n","export default function Debugger(props: { line: number, code: string }) {\r\n    return <pre style={{ color: '#fff' }}>\r\n        <code>\r\n            {props.code.split('\\n').map((x, i) => <div\r\n                key={`line-${i}`}\r\n                className={props.line === i + 1 ? 'line-highlight' : 'no-line-highlight'}>{i + 1} {x.length ? x : <br />}</div>)}\r\n        </code>\r\n    </pre>\r\n}\r\n","export function HudView(props: { index1: number, index2: number, speed: number }) {\r\n    return <div className=\"hud\" >\r\n        <span>Index 1: {props.index1}, </span>\r\n        <span>Index 2: {props.index2}, </span>\r\n        <span>Geschwindigkeit: {props.speed}x</span>\r\n    </div>\r\n}\r\n","export default function PauseButton(props: { onToggle: (x: any) => void, paused: boolean }) {\r\n    return <button onClick={props.onToggle}>{props.paused ? 'Weiter' : 'Stop'}</button>\r\n}\r\n","export default function SpeedSlider(props: { onChange: (x: number) => void }) {\r\n    return <div>\r\n        <input\r\n            className=\"speed-slider\"\r\n            type=\"range\"\r\n            onChange={x => props.onChange(x.target.valueAsNumber)}\r\n            min={.1}\r\n            step={.1}\r\n            max={10}></input>\r\n    </div>\r\n}\r\n","import React from 'react'\nimport BubbleSort from './algorithms/BubbleSort'\nimport SortAlgorithm, { StateInfo } from './algorithms/SortAlgorithm'\nimport './App.css'\nimport AlgorithmSelector from './components/AlgorithmSelector'\nimport Bar from './components/Bar'\nimport Debugger from './components/Debugger'\nimport { HudView } from './components/Hud'\nimport PauseButton from './components/PauseButton'\nimport SpeedSlider from './components/SpeedSlider'\n\nfunction generateValues(count: number) {\n  var arr: number[] = []\n\n  for (let index = 0; index < count; index++) {\n    arr.push(Math.random())\n  }\n\n  return arr\n}\n\ninterface Config {\n  speed: number,\n  pause: boolean\n}\n\ninterface State {\n  array: number[],\n  line: number,\n  generator: IterableIterator<StateInfo>,\n  algorithm: SortAlgorithm,\n  index: number,\n  index2: number,\n  config: Config\n}\n\nfunction stateFactory(count: number, algorithm: SortAlgorithm) {\n  const array = generateValues(count)\n  return { array, line: 0, generator: algorithm.sort(array), algorithm, index: 0, index2: 0, config: { pause: false, speed: 1 } }\n}\n\nconst defaultState = stateFactory(100, BubbleSort)\n\nclass App extends React.Component<{}, State>{\n  constructor(props: {}) {\n    super(props)\n    this.state = defaultState\n  }\n\n  componentDidMount() {\n    setTimeout(this.tick.bind(this), 100)\n  }\n\n  tick() {\n    if (this.state.config.pause) {\n      setTimeout(this.tick.bind(this), 100)\n      return\n    }\n\n    const result = this.state.generator.next()\n    const info: StateInfo = result.value\n\n    if (result.done) {\n      return\n    }\n\n    this.setState({ ...this.state, ...info })\n    setTimeout(this.tick.bind(this), info.delay / this.state.config.speed)\n  }\n\n  render() {\n    const widthPerTile = window.innerWidth / this.state.array.length\n\n    return (\n      <div className=\"app\">\n        <AlgorithmSelector onChange={algo => this.setState(stateFactory(100, algo))} />\n        <HudView index1={this.state.index} index2={this.state.index2} speed={this.state.config.speed} />\n        <SpeedSlider onChange={x => this.setState({ ...this.state, config: { ...this.state.config, speed: x } })} />\n        <PauseButton onToggle={x => this.setState({ ...this.state, config: { ...this.state.config, pause: !this.state.config.pause } })} paused={this.state.config.pause} />\n        <Debugger line={this.state.line} code={this.state.algorithm.implementation} />\n        <div className=\"container\">\n          {this.state.array.map((value, index) => <Bar highlight={index === this.state.index || index === this.state.index2} value={value} width={widthPerTile} />)}\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}